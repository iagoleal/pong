// Generated by CoffeeScript 1.9.0
(function() {
  window.Board = (function() {
    Board.prototype.canvas = null;

    Board.prototype.context = null;

    Board.prototype.bgColor = "#000000";

    Board.prototype.fps = 0;

    Board.prototype.length = 0;

    Board.prototype.u = 0;

    Board.prototype.balls = null;

    Board.prototype.players = null;

    Board.prototype.mouse = null;

    function Board(cv) {
      this.canvas = cv;
      this.context = this.canvas.getContext("2d");
      this.length = 600;
      this.setSize();
      this.mouse = {
        pressed: false,
        x: 0,
        y: 0
      };
      this.balls = [];
      this.balls.push(new Ball({
        x: this.length / 2,
        y: this.length / 2
      }, this.length / 100));
      this.players = [];
      this.players.push(new Player("player", {
        x: 0,
        y: this.length / 2
      }, this.length / 4));
      this.players.push(new Player("computer", {
        x: this.length,
        y: this.length / 2
      }, this.length / 4));
      this.start();
    }

    Board.prototype.setSize = function() {
      this.canvas.width = this.length;
      this.canvas.height = this.length;
      if (window.innerWidth < window.innerHeight) {
        this.canvas.style.width = window.innerWidth * 0.99 + 'px';
        this.canvas.style.height = window.innerWidth * 0.99 + 'px';
        this.u = this.length / (window.innerWidth * 0.99);
      } else {
        this.canvas.style.width = window.innerHeight * 0.99 + 'px';
        this.canvas.style.height = window.innerHeight * 0.99 + 'px';
        this.u = this.length / (window.innerHeight * 0.99);
      }
      return this.canvas.style.width = this.length;
    };

    Board.prototype.start = function() {
      var ball, _i, _len, _ref, _results;
      _ref = this.balls;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ball = _ref[_i];
        _results.push(ball.start());
      }
      return _results;
    };

    Board.prototype.collision = function(b) {
      switch (false) {
        case !(b.r.x + b.v.x <= 0):
          if (b.r.y <= this.players[0].r.y + this.players[0].height / 2 && b.r.y >= this.players[0].r.y - this.players[0].height / 2) {
            this.players[0].color = b.color;
            b.v.x *= -1;
            return b.v.y += this.players[0].v;
          } else {
            this.players[1].points++;
            return this.balls.splice(this.balls.indexOf(b), 1);
          }
          break;
        case !(b.r.x + b.v.x >= this.length):
          if (b.r.y <= this.players[1].r.y + this.players[1].height / 2 && b.r.y >= this.players[1].r.y - this.players[1].height / 2) {
            this.players[1].color = b.color;
            b.v.x *= -1;
            return b.v.y += this.players[1].v;
          } else {
            this.players[0].points++;
            return this.balls.splice(this.balls.indexOf(b), 1);
          }
          break;
        case !(b.r.y + b.v.y <= 0 || b.r.y + b.v.y >= this.length):
          return b.v.y *= -1;
      }
    };

    Board.prototype.animate = function() {
      var ball, mod, p, player, _i, _j, _len, _len1, _ref, _ref1, _results;
      if (this.mouse.pressed) {
        p = this.mouse.x < this.length / 2 ? 0 : 1;
        mod = this.mouse.y < this.players[p].r.y ? -1 : 1;
        this.players[p].v += mod * this.length / 200;
      }
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        if (player.type === "computer") {
          player.move(this.balls);
        }
        player.go(this.length);
      }
      if (this.balls.length === 0) {
        this.balls.push(new Ball({
          x: this.length / 2,
          y: this.length / 2
        }, this.length / 100));
        this.balls[0].start();
      }
      _ref1 = this.balls;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        ball = _ref1[_j];
        this.collision(ball);
        _results.push(ball.go());
      }
      return _results;
    };

    Board.prototype.draw = function() {
      var ball, player, _i, _j, _len, _len1, _ref, _ref1, _results;
      this.context.fillStyle = this.bgColor;
      this.context.fillRect(0, 0, this.length, this.length);
      this.context.shadowBlur = 0;
      this.context.shadowOffsetX = 0;
      this.context.strokeStyle = "white";
      this.context.lineWidth = 2;
      this.context.beginPath();
      this.context.moveTo(this.length / 2, 0);
      this.context.lineTo(this.length / 2, this.length);
      this.context.stroke();
      this.context.closePath();
      this.context.beginPath();
      this.context.arc(this.length / 2, this.length / 2, this.length / 13, 0, 2 * Math.PI);
      this.context.stroke();
      this.context.closePath();
      this.context.fillStyle = "#ccc";
      this.context.font = (this.length / 5) + "px Lucida Console";
      this.context.textAlign = "center";
      this.context.textBaseline = "middle";
      this.context.fillText(this.players[0].points.toString(), this.length / 4, this.length / 2, this.length / 2);
      this.context.fillText(this.players[1].points.toString(), (3 / 4) * this.length, this.length / 2, this.length / 2);
      this.context.font = "bold 100% Lucida Console";
      this.context.fillText(this.fps, this.length / 10, this.length / 10);
      _ref = this.balls;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ball = _ref[_i];
        ball.draw(this.context);
      }
      _ref1 = this.players;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        player = _ref1[_j];
        _results.push(player.draw(this.context));
      }
      return _results;
    };

    return Board;

  })();

}).call(this);
