// Generated by CoffeeScript 1.9.0
(function() {
  window.Player = (function() {
    Player.prototype.r = null;

    Player.prototype.height = 0;

    Player.prototype.v = 0;

    Player.prototype.a = 0;

    Player.prototype.type = null;

    Player.prototype.side = null;

    Player.prototype.points = 0;

    Player.prototype.color = null;

    function Player(_at_type, p, _at_height) {
      this.type = _at_type != null ? _at_type : "player";
      if (p == null) {
        p = {
          x: 0,
          y: 0
        };
      }
      this.height = _at_height != null ? _at_height : 1;
      this.r = {
        x: p.x,
        y: p.y
      };
      this.color = {
        r: Math.round(Math.random() * 255),
        g: Math.round(Math.random() * 255),
        b: Math.round(Math.random() * 255)
      };
    }

    Player.prototype.move = function(balls) {
      var b, ball, _i, _len;
      ball = null;
      for (_i = 0, _len = balls.length; _i < _len; _i++) {
        b = balls[_i];
        if ((ball == null) || Math.abs(this.r.y - b.r.y) < Math.abs(this.r.y - ball.r.y)) {
          ball = b;
        }
      }
      if (ball) {
        if (ball.r.y - this.r.y > 0) {
          return this.v += this.height / 100;
        } else if (ball.r.y - this.r.y < 0) {
          return this.v -= this.height / 100;
        }
      }
    };

    Player.prototype.go = function(l) {
      this.v *= 0.9;
      if ((this.r.y - this.height / 2) + this.v <= 0) {
        this.v = 0;
        return this.r.y = this.height / 2;
      } else if ((this.r.y + this.height / 2) + this.v >= l) {
        this.v = 0;
        return this.r.y = l - this.height / 2;
      } else {
        return this.r.y += this.v;
      }
    };

    Player.prototype.draw = function(c) {
      var color, i, q, _i, _results;
      c.lineCap = "round";
      _results = [];
      for (i = _i = 5; _i >= 0; i = --_i) {
        c.lineWidth = (i + 1) * 5 - 2;
        color = i === 0 ? '#fff' : "rgba(" + this.color.r + ", " + this.color.g + ", " + this.color.b + ", 0.2)";
        c.strokeStyle = color;
        q = i === 0 ? 0 : (5 - i) * this.height * 0.05;
        c.beginPath();
        c.moveTo(this.r.x, this.r.y - this.height / 2 + q);
        c.lineTo(this.r.x, this.r.y + this.height / 2 - q);
        c.stroke();
        _results.push(c.closePath());
      }
      return _results;
    };

    return Player;

  })();

}).call(this);
